name: Setup build environment
description: This action installs all build tools needed for irmamobile and caches the result to speed up future runs.
runs:
  using: composite
  steps:
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
    - uses: actions/setup-go@v5
      with:
        go-version: ^1.22
        cache: true
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: Check Ruby cache
      uses: actions/cache@v4
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MINS: "1"
      with:
        path: rubyvendor/
        key: ruby-${{ runner.os }}-${{ hashFiles('Gemfile.lock') }}
    - run: bundle install
      shell: bash
    - name: Set environment variables
      run: |
        ANDROID_HOME=~/android-sdk
        FLUTTER_HOME=~/flutter
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk-bundle" >> $GITHUB_ENV
        echo "FLUTTER_HOME=$FLUTTER_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/cmdline-tools/bin" >> $GITHUB_PATH
        echo "$FLUTTER_HOME/bin" >> $GITHUB_PATH
      shell: bash
    - name: Setup symlink for Android irma_configuration
      run: ln -s "../../../../../irma_configuration" "./android/app/src/main/assets/irma_configuration"
      shell: bash
    - name: Check ci_scripts cache
      uses: actions/cache@v4
      # If we cannot download the cached content from GitHub within 5 minutes, then
      # we continue like there was no cache hit.
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MINS: "5"
      with:
        path: |
          ${{ env.ANDROID_HOME }}
          ${{ env.FLUTTER_HOME }}
        key: ci_scripts-${{ runner.os }}-${{ hashFiles('ci_scripts/*') }}
    - name: Ensure Android SDK is installed
      if: runner.os == 'Linux'
      run: ./ci_scripts/install_android_sdk.sh
      shell: bash
    - name: Ensure Flutter is installed
      run: ./ci_scripts/install_flutter.sh
      shell: bash
    - name: Ensure Go mobile is installed
      run: ./ci_scripts/install_gomobile.sh
      shell: bash
    - name: Use correct Xcode version
      if: runner.os == 'macOS'
      run: sudo xcode-select --switch /Applications/Xcode_16.4.app
      shell: bash
    - name: Check Cocoapods cache
      id: cocoapods-cache
      if: runner.os == 'macOS'
      uses: actions/cache@v4
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MINS: "1"
      with:
        path: ios/Pods
        # Cocoapods depends on Ruby and our Podfile needs the Flutter dependencies to be present.
        key: cocoapods-${{ runner.os }}-${{ hashFiles('Gemfile.lock', 'pubspec.lock', 'ios/Podfile.lock') }}
    - name: Pre-install Cocoapods to fill cache
      if: runner.os == 'macOS' && steps.cocoapods-cache.outputs.cache-hit != 'true'
      run: |
        flutter pub get
        cd ios && pod install
      shell: bash
