def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "foundation.privacybydesign.irmamobile.alpha"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "track"
    productFlavors {
        alpha {
            dimension "track"
            applicationId "foundation.privacybydesign.irmamobile.alpha"
        }
        beta {
            dimension "track"
            applicationId "org.irmacard.cardemu"
        }
    }

    buildTypes {
        release {
            // Sign here with dummy credentials, fastlane will do the actual
            // signing using a resign
            signingConfig signingConfigs.debug
        }
    }

    // We use the React Native build numbering (with base 0x100000 and different multipliers per target platform)
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug and universal-release variants
                output.versionCodeOverride = versionCodes.get(abi) * 0x100000 + defaultConfig.versionCode
            }
        }
    }

    // We also include the universal APK for ad-hoc app test distribution.
    splits {
        abi {
            universalApk true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation project(':irmagobridge')
    implementation "androidx.browser:browser:1.2.0"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}
