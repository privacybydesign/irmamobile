before_all do
  skip_docs()
  # Ensure that build and profiles directories are present in fastlane directory.
  sh("mkdir -p ./build/ ./profiles/")
end

lane :lint do
  Dir.chdir("..") do
    sh("flutter", "format", "--line-length", "120", "--set-exit-if-changed", "lib/", "test/", "integration_test/")
    # TODO: Remove --no-fatal-warnings option when all warnings are resolved.
    sh("flutter", "analyze", "--no-fatal-infos", "--no-fatal-warnings")
  end
end

lane :unit_test do
  Dir.chdir("..") do
    # TODO: remove --no-sound-null-safety option when all unit tests use null-safely
    sh("flutter", "test", "--no-sound-null-safety")
  end
end

lane :android_build do |options|
  android_build_irmagobridge()
  android_build_appbundle(
    flavor: options[:flavor],
    sentry_dsn: options[:sentry_dsn],
    keystore_path: options[:keystore_path],
    keystore_password: options[:keystore_password],
    key_alias: options[:key_alias],
    key_password: options[:key_password]
  )
end

lane :android_build_irmagobridge do
  Dir.chdir("..") do
    sh("gomobile", "bind", "-target", "android", "-o", "android/irmagobridge/irmagobridge.aar", "github.com/privacybydesign/irmamobile/irmagobridge")
  end
end

lane :android_build_apk do |options|
  android_build_app(
    build_type: "apk",
    flavor: options[:flavor],
    sentry_dsn: options[:sentry_dsn],
    keystore_path: options[:keystore_path],
    keystore_password: options[:keystore_password],
    key_alias: options[:key_alias],
    key_password: options[:key_password]
  )
  Dir.chdir("..") do
    sh("cp ./build/app/outputs/apk/#{options[:flavor]}/release/*.apk ./fastlane/build/")
  end
end

lane :android_build_appbundle do |options|
  android_build_app(
    build_type: "appbundle",
    flavor: options[:flavor],
    sentry_dsn: options[:sentry_dsn],
    keystore_path: options[:keystore_path],
    keystore_password: options[:keystore_password],
    key_alias: options[:key_alias],
    key_password: options[:key_password]
  )
  Dir.chdir("..") do
    sh("cp ./build/app/outputs/bundle/#{options[:flavor]}Release/*.aab ./fastlane/build/")
  end
end

private_lane :android_build_app do |options|
  update_schemes()
  commit = last_git_commit()
  write_sentrydata(
    dsn: options[:sentry_dsn],
    version: commit[:commit_hash]
  )

  # In Fastlane it's not possible to mask secrets in the command, while showing the shell output of the command.
  # Therefore, we use environment variables to hide parameter values.
  puts "In the following command, parameter values are hidden using environment variables."
  cmd = "flutter build $FASTLANE_BUILD_TYPE --flavor $FASTLANE_FLAVOR --release"
  ENV["FASTLANE_BUILD_TYPE"] = options[:build_type]
  ENV["FASTLANE_FLAVOR"] = options[:flavor]
  if options[:keystore_path]
    ENV["FASTLANE_KEYSTORE_PATH"] = File.absolute_path(options[:keystore_path])
    ENV["FASTLANE_KEYSTORE_PASSWORD"] = options[:keystore_password]
    ENV["FASTLANE_KEY_ALIAS"] = options[:key_alias]
    ENV["FASTLANE_KEY_PASSWORD"] = options[:key_password]
    cmd += " -PkeyStoreFile=$FASTLANE_KEYSTORE_PATH -PkeyStorePassword=$FASTLANE_KEYSTORE_PASSWORD"
    cmd += " -PkeyAlias=$FASTLANE_KEY_ALIAS -PkeyPassword=$FASTLANE_KEY_PASSWORD"
  end

  Dir.chdir("..") do
    sh(cmd)
  end
end

lane :android_build_integration_test do
  update_schemes()
  Dir.chdir("..") do
    sh(
      "flutter", "build", "apk",
      "--flavor", "alpha",
      "--debug",
      "./integration_test/test_all.dart"
    )
    Dir.chdir("./android") do
      sh("./gradlew", "app:assembleAndroidTest")
    end
    sh("cp ./build/app/outputs/apk/alpha/debug/*.apk ./fastlane/build/")
    sh("cp ./build/app/outputs/apk/androidTest/alpha/debug/*.apk ./fastlane/build/")
  end
end

lane :ios_build do |options|
  ios_build_irmagobridge()
  ios_build_app(
    export: options[:export],
    flavor: options[:flavor],
    sentry_dsn: options[:sentry_dsn],
    certificate_path: options[:certificate_path],
    certificate_password: options[:certificate_password],
    provisioning_profile_path: options[:provisioning_profile_path]
  )
end

lane :ios_build_irmagobridge do
  Dir.chdir("..") do
    sh("gomobile", "bind", "-target", "ios", "-iosversion", "12.0", "-o", "ios/Runner/Irmagobridge.xcframework", "github.com/privacybydesign/irmamobile/irmagobridge")
  end
end

lane :ios_build_app do |options|
  display_name = ""
  app_identifier = ""
  export = options[:export]
  export = true if export.nil?
  export_method = ""
  # For now, we assume that alpha builds are meant for ad hoc distribution and beta builds for app store distribution.
  case options[:flavor]
  when "alpha"
    display_name = "IRMA 2020"
    app_identifier = "foundation.privacybydesign.irmamob.alpha"
    export_method = "ad-hoc"
  when "beta"
    display_name = "IRMA"
    app_identifier = "foundation.privacybydesign.irmamob"
    export_method = "app-store"
  else
    raise "Unsupported flavor"
  end

  update_schemes()
  update_app_identifier(
    xcodeproj: "ios/Runner.xcodeproj",
    plist_path: "Runner/Info.plist",
    app_identifier: app_identifier
  )
  update_info_plist(
    xcodeproj: "ios/Runner.xcodeproj",
    plist_path: "Runner/Info.plist",
    display_name: display_name
  )
  commit = last_git_commit()
  write_sentrydata(
    dsn: options[:sentry_dsn],
    version: commit[:commit_hash]
  )

  # When a certificate path is given, we ensure it is properly installed.
  if options[:certificate_path]
    keychain_path = File.absolute_path("profiles/apple_distribution.keychain")
    certificate_password = options[:certificate_password] || ""
    create_keychain(
      path: keychain_path,
      password: certificate_password,
      unlock: true,
      timeout: 600
    )
    import_certificate(
      certificate_path: File.absolute_path(options[:certificate_path]),
      certificate_password: certificate_password,
      keychain_path: keychain_path,
      keychain_password: certificate_password
    )
  end

  # When a provisioning profile is given, we ensure it is installed and selected in the project.
  # If none is specified, we try to fetch the right provisioning profile using the Apple App Store Connect API.
  # Otherwise, we use the profile that is currently selected in XCode.
  if options[:provisioning_profile_path]
    provisioning_profile_path = File.absolute_path(options[:provisioning_profile_path])
    install_provisioning_profile(
      path: provisioning_profile_path
    )
    update_project_provisioning(
      xcodeproj: "ios/Runner.xcodeproj",
      profile: provisioning_profile_path
    )
  elsif options[:api_key_filepath]
    api_key_filepath = File.absolute_path(options[:api_key_filepath])
    api_key = app_store_connect_api_key(
      key_id: options[:api_key_id],
      issuer_id: options[:api_issuer_id],
      key_filepath: api_key_filepath,
      duration: 60
    )
    # Automatically fetch the provisioning profile matching the current distribution certificate and app identifier.
    get_provisioning_profile(
      adhoc: export_method == "ad-hoc",
      app_identifier: app_identifier,
      api_key: api_key,
      readonly: true
    )
  end

  # The 'flutter build ipa' command does not support changing the export method in Flutter 2.
  # Therefore, we use 'flutter build ios' for now with the --no-codesign option
  # and then we use Fastlane's build_ios_app action to sign and export the build.
  Dir.chdir("..") do
    sh("flutter", "build", "ios", "--release", "--no-codesign")
  end

  if export
    build_ios_app(
      scheme: "Runner",
      workspace: "ios/Runner.xcworkspace",
      output_directory: "fastlane/build",
      output_name: "app-#{options[:flavor]}-ios-#{export_method}.ipa",
      export_method: export_method
    )
  end
end

private_lane :update_schemes do
  Dir.chdir("../irma_configuration/pbdf") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
  end
  Dir.chdir("../irma_configuration/pbdf-requestors") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
  end
  Dir.chdir("../irma_configuration/irma-demo") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
    sh("rm", "-f", "sk.pem")
  end
  Dir.chdir("../irma_configuration/irma-demo-requestors") do
    sh("git", "checkout", "master")
    sh("git", "pull", "-f")
  end
end

private_lane :write_sentrydata do |options|
  erb(
    template: "fastlane/sentry_dsn.erb",
    destination: "lib/sentry_dsn.dart",
    placeholders: {
      :dsn => options[:dsn],
      :version => options[:version]
    }
  )
end
